SimpleC {
   Program     =  directives* Global* Method+ directives*

   Global      =  Register? Type id GlobalValue? ";"            -- mem
               |  Register? Type id ArrayDim* GlobalArray? ";"  -- array

   Register    =  reg "(" numlit ")"
   GlobalValue =  "=" Exp
   GlobalArray =  "=" ArrayInit

   ArrayDim    = "[" numlit "]"
   ArrayInit   =  "{" NonemptyListOf<ArrayInit, ","> "}"   -- block
               |  ArrayLit                                 -- literal
   ArrayLit    =  Literal
               |  neglit

   Method      =  MethodType id "(" ListOf<Param, ","> ")" "{" Vars* Statements "}"     -- declaration
               |  MethodType id "(" ListOf<Param, ","> ")" "/*-{" Vars* #asm "}-*/" ";" -- asm
               |  MethodType id "(" ListOf<Param, ","> ")" ";"                          -- extern
   Param       =  Type id

   asm         =  (~"}-*/" any)*

   Vars        =  Type ListOf<Var, ","> ";"   -- local
               |  static Type Var "=" Exp ";" -- static
   Var         =  id
   Statements  =  Stmt* ReturnStmt?

   Stmt        =  Assignment ";"                                                                         -- assign
               |  if "(" Exp ")" "{" Statements "}" Else?                                                -- if
               |  for "(" ListOf<Assignment, ","> ";" Exp? ";" ListOf<Assignment, ","> ")" "{" Stmt* "}" -- for
               |  do "{" Stmt* "}" while "(" Exp ")" ";"                                                 -- do
               |  while "(" Exp ")" "{" Stmt* "}"                                                        -- while
               |  MethodCall ";"                                                                         -- call

   Assignment  =  id assignop Exp                          -- simple
               |  id ArrayAccess+ assignop Exp             -- array

   Else        = else "{" Statements "}"                   -- block
               | else Stmt_if                              -- if

   ReturnStmt  = return Exp? ";"

   Exp         =  Exp0 "?" Exp ":" Exp        -- if
               |  Exp0
   Exp0        =  Exp0 logorop Exp1           -- binary
               |  Exp1
   Exp1        =  Exp1 logandop Exp2          -- binary
               |  Exp2
   Exp2        =  Exp2 orop Exp3              -- binary
               |  Exp3
   Exp3        =  Exp3 andop Exp4             -- binary
               |  Exp4
   Exp4        =  Exp4 relop Exp5             -- binary
               |  Exp5
   Exp5        =  Exp5 shiftop Exp6           -- binary
               |  Exp6
   Exp6        =  Exp6 addop Exp7             -- binary
               |  Exp7
   Exp7        =  Exp7 mulop Exp8             -- binary
               |  Exp8
   Exp8        =  prefixop Exp8               -- unary
               |  "(" Type ")" Exp8           -- cast
               |  Exp9
   Exp9        =  Literal
               |  MethodCall
               |  ArrayExp
               |  VarExp
               |  "(" Exp ")"                 -- parens

   Literal     =  numlit
               |  boollit

   VarExp      =  id

   ArrayExp    =  id ArrayAccess+
   ArrayAccess =  "[" Exp "]"

   MethodCall  =  id "(" ListOf<Exp, ","> ")"

   MethodType  = void | Type

   Type        =  sign? char
               |  sign? int
               |  sign? bool
   sign        =  signed
               |  unsigned

   char        =  "char" ~idrest
   int         =  "int" ~idrest
               |  "short" ~idrest
   bool        =  "bool" ~idrest
   void        =  "void" ~idrest
   true        =  "true" ~idrest
   false       =  "false" ~idrest
   reg         =  "reg" ~idrest
   if          =  "if" ~idrest
   else        =  "else" ~idrest
   while       =  "while" ~idrest
   return      =  "return" ~idrest
   for         =  "for" ~idrest
   do          =  "do" ~idrest
   static      =  "static" ~idrest
   signed      =  "signed" ~idrest
   unsigned    =  "unsigned" ~idrest

   keyword     =  char | int | bool | true | false | reg | if | else | while | do | for | return | void | static
   id          =  ~keyword letter idrest*
   idrest      =  alnum
   numlit      =  intlit | hexlit
   neglit      =  "-" digit+ "u"?
   intlit      =  ~"0x" digit+ "u"?
   hexlit      =  hex "u"?
   hex         =  "0x" hexDigit+
   hexDigit   :=  "0".."9" | "a".."f" | "A".."F"
   boollit     =  true | false
   logorop     =  "||"
   logandop    =  "&&"
   orop        =  "|" | "^"
   andop       =  "&"
   relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
   shiftop     =  "<<" | ">>"
   addop       =  "+" | "-"
   mulop       =  "*" | "/" | "%"
   prefixop    =  "-" | "!" | "~"
   assignop    = "=" | "||=" | "|=" | "^=" | "&&=" | "&=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>="

   directives  =  "#ifndef" (~"#endif" any)* "#endif"
               |  "#" (~"\n" any)* "\n"
   space      +=  comment
   comment     =  "//" (~"\n" any)* "\n"  -- singleLine
               |  "/*" ~"-{" ("}-*/" | ~"*/" any)* "*/"  -- multiLine
}
